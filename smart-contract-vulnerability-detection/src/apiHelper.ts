// import axios from 'axios';
// import * as fs from 'fs';
// import * as path from 'path';

// export async function analyzeCode(
//     apiKey: string,
//     code: string,
//     vulnerabilityType: string
// ): Promise<any> {
//     // Define file paths
//     const dataPath = path.join(__dirname, `../data/${vulnerabilityType}`);
//     const instructionPath = path.join(dataPath, `${vulnerabilityType}_instruction.txt`);
//     const exampleSolidityPath = path.join(dataPath, `${vulnerabilityType}_sample.sol`);
//     const exampleJsonPath = path.join(dataPath, `${vulnerabilityType}_sample.json`);

//     // Load the instructions and examples
//     const instructions = fs.readFileSync(instructionPath, 'utf8');
//     const exampleSolidity = fs.readFileSync(exampleSolidityPath, 'utf8');
//     const exampleJson = fs.readFileSync(exampleJsonPath, 'utf8');

//     // Construct the prompt
//     const prompt = `
//         You are a cybersecurity expert analyzing Solidity code for vulnerabilities.

//         Instructions:
//         ${instructions}

//         Example Code:
//         ${exampleSolidity}

//         Example Result:
//         ${exampleJson}

//         Analyze the following Solidity code for vulnerabilities, regardless of Solidity's version-based protections:
//         ${code}
//     `;

//     // Debug logging for the prompt
//     console.log(`Prompt sent to API:\n${prompt}`);

//     // Send the prompt to the OpenAI API
//     const response = await axios.post(
//         'https://api.openai.com/v1/chat/completions',
//         {
//             model: 'gpt-4',
//             messages: [
//                 {
//                     role: 'system',
//                     content: 'You are a cybersecurity expert analyzing Solidity code.',
//                 },
//                 {
//                     role: 'user',
//                     content: prompt,
//                 },
//             ],
//         },
//         {
//             headers: {
//                 'Authorization': `Bearer ${apiKey}`,
//                 'Content-Type': 'application/json',
//             },
//         }
//     );

//     return response.data;
// }

///////////// USING generator.ts:
import { Generator } from './generator';

export async function analyzeCode(
    apiKey: string,
    code: string,
    vulnerabilityType: string
): Promise<any> {
    const generator = new Generator(apiKey, 'detector', vulnerabilityType);

    // Build the prompt (no additional examples used here, but can be added)
    // generator.createPrompt([], code);

    // // Generate the response
    // const responseContent = await generator.generate();

    // Parse and return the result
    // return JSON.parse(responseContent);
}
