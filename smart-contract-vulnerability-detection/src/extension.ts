// // Import dependencies
// import { OpenAIResponse } from './types'; // Import the interface
// import { analyzeCode } from './apiHelper'; // Import the helper function
// import * as vscode from 'vscode';
// import * as dotenv from 'dotenv'; // For loading environment variables

// // Load environment variables
// dotenv.config();

// // Declare the Output Channel
// const outputChannel = vscode.window.createOutputChannel('Vulnerability Detection Logs');

// // This method is called when your extension is activated
// export function activate(context: vscode.ExtensionContext) {
//     outputChannel.appendLine('Congratulations, your extension "smart-contract-vulnerability-detection" is now active!');

//     // Command to Detect Vulnerabilities
//     const detectVulnerabilities = vscode.commands.registerCommand(
//         'smart-contract-vulnerability-detection.detectVulnerabilities',
//         async () => {
//             const editor = vscode.window.activeTextEditor;
//             if (editor) {
//                 const code = editor.document.getText(); // Get the active file's content

//                 // Prompt the user to choose a vulnerability type
//                 const selectedVulnerability = await vscode.window.showQuickPick(
//                     ['Integer Overflow/Underflow', 'Time Dependency', 'Reentrancy'],
//                     {
//                         placeHolder: 'Select a vulnerability type to detect',
//                     }
//                 );

//                 if (selectedVulnerability) {
//                     outputChannel.appendLine(`Selected vulnerability: ${selectedVulnerability}`);
//                     try {
//                         const result = await detectVulnerabilitiesInCode(code, selectedVulnerability);
//                         if (result.trim() === '') {
//                             vscode.window.showInformationMessage('No vulnerabilities detected in the provided code.');
//                             outputChannel.appendLine('No vulnerabilities detected.');
//                         } else {
//                             vscode.window.showInformationMessage(result);
//                             outputChannel.appendLine(`Result: ${result}`);
//                         }
//                     } catch (error: unknown) {
//                         if (error instanceof Error) {
//                             outputChannel.appendLine(`Error: ${error.message}`);
//                             vscode.window.showErrorMessage(`Error: ${error.message}`);
//                         } else {
//                             const unknownErrorMessage = 'An unknown error occurred while analyzing the code.';
//                             outputChannel.appendLine(unknownErrorMessage);
//                             vscode.window.showErrorMessage(unknownErrorMessage);
//                         }
//                     }
//                 } else {
//                     vscode.window.showErrorMessage('No vulnerability type selected!');
//                     outputChannel.appendLine('No vulnerability type selected!');
//                 }
//             } else {
//                 vscode.window.showErrorMessage('No active editor found!');
//                 outputChannel.appendLine('No active editor found!');
//             }
//         }
//     );

//     // Add the command to the subscriptions
//     context.subscriptions.push(detectVulnerabilities);
// }

// // This method is called when your extension is deactivated
// export function deactivate() {
//     outputChannel.appendLine('Extension deactivated.');
// }

// // Function to detect vulnerabilities in the code
// async function detectVulnerabilitiesInCode(code: string, vulnerabilityType: string): Promise<string> {
//     const apiKey = process.env.OPENAI_API_KEY || 'YOUR_OPENAI_API_KEY'; // Load API key securely
//     if (!apiKey) {
//         const errorMessage = 'API key is missing. Please set the OPENAI_API_KEY environment variable.';
//         outputChannel.appendLine(errorMessage);
//         throw new Error(errorMessage);
//     }

//     const fullPrompt = `Detect ${vulnerabilityType} vulnerabilities in the following code and provide JSON with start and end lines, reasons, and risks:\n\n${code}`;
//     outputChannel.appendLine(`Calling API with prompt: ${fullPrompt}`);

//     try {
//         const response: OpenAIResponse = await analyzeCode(apiKey, fullPrompt);

//         // Validate the response structure
//         if (!response.choices || !response.choices[0]?.message?.content) {
//             const errorMessage = `Unexpected API response structure: ${JSON.stringify(response, null, 2)}`;
//             outputChannel.appendLine(errorMessage);
//             throw new Error("Unexpected API response structure. Missing 'choices[0].message.content'.");
//         }

//         return response.choices[0].message.content;
//     } catch (error: unknown) {
//         if (error instanceof Error) {
//             outputChannel.appendLine(`Error in detectVulnerabilitiesInCode: ${error.message}`);
//             throw new Error(`Error while analyzing code: ${error.message}`);
//         } else {
//             const unknownErrorMessage = 'An unknown error occurred while analyzing the code.';
//             outputChannel.appendLine(unknownErrorMessage);
//             throw new Error(unknownErrorMessage);
//         }
//     }
// }
///////////////////////////////////// with asking for api key: ///////////////////////
// Import dependencies
import { OpenAIResponse } from './types'; // Import the interface
import { analyzeCode } from './apiHelper'; // Import the helper function
import * as vscode from 'vscode';

// Declare the Output Channel
const outputChannel = vscode.window.createOutputChannel('Vulnerability Detection Logs');

// Key for storing the API key in global state
const OPENAI_API_KEY_STORAGE_KEY = 'openaiApiKey';

// This method is called when your extension is activated
export function activate(context: vscode.ExtensionContext) {
    outputChannel.appendLine('Congratulations, your extension "smart-contract-vulnerability-detection" is now active!');

    // Command to Set API Key
    const setApiKeyCommand = vscode.commands.registerCommand('smart-contract-vulnerability-detection.setApiKey', async () => {
        const apiKey = await vscode.window.showInputBox({
            prompt: 'Enter your OpenAI API key',
            placeHolder: 'sk-xxxxxx',
            ignoreFocusOut: true,
            password: true, // Mask the input
        });

        if (apiKey) {
            context.globalState.update(OPENAI_API_KEY_STORAGE_KEY, apiKey);
            vscode.window.showInformationMessage('API key saved successfully!');
            outputChannel.appendLine('API key saved successfully!');
        } else {
            vscode.window.showWarningMessage('No API key entered.');
        }
    });

    // Command to Detect Vulnerabilities
    const detectVulnerabilities = vscode.commands.registerCommand(
        'smart-contract-vulnerability-detection.detectVulnerabilities',
        async () => {
            const editor = vscode.window.activeTextEditor;
            if (editor) {
                const code = editor.document.getText(); // Get the active file's content

                // Retrieve the API key
                const apiKey = context.globalState.get<string>(OPENAI_API_KEY_STORAGE_KEY);
                if (!apiKey) {
                    vscode.window.showErrorMessage('API key not set. Please use the "Set OpenAI API Key" command to enter your API key.');
                    outputChannel.appendLine('API key not set.');
                    return;
                }

                // Prompt the user to choose a vulnerability type
                const selectedVulnerability = await vscode.window.showQuickPick(
                    ['Integer Overflow/Underflow', 'Time Dependency', 'Reentrancy'],
                    {
                        placeHolder: 'Select a vulnerability type to detect',
                    }
                );

                if (selectedVulnerability) {
                    outputChannel.appendLine(`Selected vulnerability: ${selectedVulnerability}`);
                    try {
                        const result = await detectVulnerabilitiesInCode(code, selectedVulnerability, apiKey);
                        if (result.trim() === '') {
                            vscode.window.showInformationMessage('No vulnerabilities detected in the provided code.');
                            outputChannel.appendLine('No vulnerabilities detected.');
                        } else {
                            vscode.window.showInformationMessage(result);
                            outputChannel.appendLine(`Result: ${result}`);
                        }
                    } catch (error: unknown) {
                        if (error instanceof Error) {
                            outputChannel.appendLine(`Error: ${error.message}`);
                            vscode.window.showErrorMessage(`Error: ${error.message}`);
                        } else {
                            const unknownErrorMessage = 'An unknown error occurred while analyzing the code.';
                            outputChannel.appendLine(unknownErrorMessage);
                            vscode.window.showErrorMessage(unknownErrorMessage);
                        }
                    }
                } else {
                    vscode.window.showErrorMessage('No vulnerability type selected!');
                    outputChannel.appendLine('No vulnerability type selected!');
                }
            } else {
                vscode.window.showErrorMessage('No active editor found!');
                outputChannel.appendLine('No active editor found!');
            }
        }
    );

    // Add commands to the subscriptions
    context.subscriptions.push(setApiKeyCommand, detectVulnerabilities);
}

// This method is called when your extension is deactivated
export function deactivate() {
    outputChannel.appendLine('Extension deactivated.');
}

// Function to detect vulnerabilities in the code
async function detectVulnerabilitiesInCode(code: string, vulnerabilityType: string, apiKey: string): Promise<string> {
    const fullPrompt = `Detect ${vulnerabilityType} vulnerabilities in the following code and provide JSON with start and end lines, reasons, and risks:\n\n${code}`;
    outputChannel.appendLine(`Calling API with prompt: ${fullPrompt}`);

    try {
        const response: OpenAIResponse = await analyzeCode(apiKey, fullPrompt);

        // Validate the response structure
        if (!response.choices || !response.choices[0]?.message?.content) {
            const errorMessage = `Unexpected API response structure: ${JSON.stringify(response, null, 2)}`;
            outputChannel.appendLine(errorMessage);
            throw new Error("Unexpected API response structure. Missing 'choices[0].message.content'.");
        }

        return response.choices[0].message.content;
    } catch (error: unknown) {
        if (error instanceof Error) {
            outputChannel.appendLine(`Error in detectVulnerabilitiesInCode: ${error.message}`);
            throw new Error(`Error while analyzing code: ${error.message}`);
        } else {
            const unknownErrorMessage = 'An unknown error occurred while analyzing the code.';
            outputChannel.appendLine(unknownErrorMessage);
            throw new Error(unknownErrorMessage);
        }
    }
}
