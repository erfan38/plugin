// generator.ts

import axios from 'axios';

interface Message {
    role: 'system' | 'user' | 'assistant';
    content: string;
}

export class Generator {
    private apiKey: string;
    private messages: Message[];
    private role: 'detector' | 'uncommentor' | 'renamer';
    private vulnerability?: string;
    private formatter: string;
    private systemMessage: Message;
    private userPrefix: string;

    constructor(apiKey: string, role: 'detector' | 'uncommentor' | 'renamer', vulnerability?: string) {
        this.apiKey = apiKey;
        this.messages = [];
        this.role = role;
        this.vulnerability = vulnerability;

        if (role === 'detector') {
            this.formatter = "Return the response in RFC8259 compliant JSON according to the ResponseFormat schema with no other text. The JSON format should provide reasons for each given lines of codes.";
            this.systemMessage = {
                role: 'system',
                content: "You are a cyber-security expert who analyzes and audits smart contracts. Find lines of code with vulnerabilities, reasons, and potential security risks.",
            };
            this.userPrefix = `In the code below, detect ${vulnerability} vulnerabilities through different lines of code. Give lines (start-end), explain the vulnerability reason, and describe the potential security risk it introduces.`;
        } else if (role === 'uncommentor') {
            this.formatter = "Only write the code, do not use anything before and after the code.";
            this.systemMessage = {
                role: 'system',
                content: "You are a programmer who understands the code and can edit it.",
            };
            this.userPrefix = "Remove in-line and between lines comments of the smart contract code with .sol format. Do not change anything else in the code.";
        } else if (role === 'renamer') {
            const relatedWords: { [key: string]: string } = {
                IoU: '"intou", "vundflw", "bug", or "iou"',
                RE: '"bug", "re_ent", "re-entrancy", or "re"',
                TD: '"tmstmp", "td", or "bug"',
            };
            const fullName: { [key: string]: string } = {
                IoU: "Integer Overflow Underflow",
                RE: "Re-entrancy",
                TD: "Timestamp Dependency",
            };

            this.formatter = "Only write the code, do not use anything before and after the code.";
            this.systemMessage = {
                role: 'system',
                content: "You are a programmer who assigns meaningful names to variables and functions.",
            };
            this.userPrefix = `I have a piece of code where certain function and variable names indicate ${fullName[vulnerability!]} bugs by containing the substrings ${relatedWords[vulnerability!]}. Please help me by keeping the code exactly the same, but change only the function and variable names that contain these substrings to more appropriate ones that are not related to the bug. Do not modify the logic or structure of the code.`;
        } else {
            throw new Error('Invalid role provided.');
        }
    }

    public setTargetVulnerability(vulnerability: string): void {
        this.vulnerability = vulnerability;
    }

    public updateMessage(newMessage: Message): void {
        this.messages.push(newMessage);
    }

    private getUserMessage(code: string): Message {
        let userContent = '';

        if (this.role === 'detector') {
            userContent = `
${this.userPrefix}

Smart Contract Code:
${code}

---
${this.formatter}
###`;
        } else if (this.role === 'uncommentor' || this.role === 'renamer') {
            userContent = `
${this.userPrefix}
Smart Contract Code:
${code}`;
        }

        return {
            role: 'user',
            content: userContent,
        };
    }

    public createPrompt(exampleMessages: Message[], code: string): void {
        this.messages = [];
        this.messages.push(this.systemMessage);
        if (exampleMessages && exampleMessages.length > 0) {
            this.messages.push(...exampleMessages);
        }
        const userMessage = this.getUserMessage(code);
        this.messages.push(userMessage);
    }

    public async generate(): Promise<string> {
        const response = await axios.post(
            'https://api.openai.com/v1/chat/completions',
            {
                model: 'gpt-4',
                messages: this.messages,
                temperature: 1,
                max_tokens: 2048,
                top_p: 1.0,
                frequency_penalty: 0,
                presence_penalty: 0,
            },
            {
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`,
                    'Content-Type': 'application/json',
                },
            }
        );

        const answer = response.data.choices[0].message.content;
        return answer;
    }
}
