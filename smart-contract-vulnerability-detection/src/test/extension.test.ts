import * as assert from 'assert';
import * as vscode from 'vscode';
import * as sinon from 'sinon'; // Use Sinon for mocking
import * as apiHelper from '../apiHelper'; // Update the path as needed

suite('Extension Test Suite', () => {
    let sandbox: sinon.SinonSandbox;

    suiteSetup(() => {
        sandbox = sinon.createSandbox(); // Create a sandbox for clean mocks
    });

    suiteTeardown(() => {
        sandbox.restore(); // Restore original functionality
    });

    setup(async () => {
        const extension = vscode.extensions.getExtension('Fatemeh.smart-contract-vulnerability-detection');
        assert.ok(extension, 'Extension should be available.');
        await extension?.activate();
    });

    test('Detect Vulnerabilities Command Test', async () => {
        // Mock `analyzeCode` to return a predictable response
        sandbox.stub(apiHelper, 'analyzeCode').resolves({
            choices: [
                {
                    message: {
                        content: JSON.stringify([
                            {
                                vulnerabilityType: 'Reentrancy',
                                vulnerableLines: '1-3',
                                vulnerabilityReason: 'Reentrancy detected in withdraw function.',
                                potentialSecurityRisk: 'Unauthorized withdrawals.',
                                fixedCode: 'function withdraw(uint amount) public nonReentrant { ... }',
                            },
                        ]),
                    },
                },
            ],
        });

        // Open a test Solidity document
        const document = await vscode.workspace.openTextDocument({
            content: `function withdraw(uint amount) public {
                require(balances[msg.sender] >= amount);
                msg.sender.call{value: amount}("");
                balances[msg.sender] -= amount;
            }`,
            language: 'solidity',
        });
        await vscode.window.showTextDocument(document);

        // Mock the API key
        const apiKey = 'test-api-key';
        const context = vscode.extensions.getExtension('Fatemeh.smart-contract-vulnerability-detection')?.exports.context;
        context?.globalState.update('openaiApiKey', apiKey);

        try {
            const result = await vscode.commands.executeCommand('smart-contract-vulnerability-detection.detectVulnerabilities');
            assert.ok(result, 'The detect vulnerabilities command should execute without errors.');
            console.log('Command Result:', result);
        } catch (error) {
            assert.fail(`Detect vulnerabilities command failed: ${error}`);
        }
    });
});
