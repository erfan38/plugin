import * as assert from 'assert';
import * as vscode from 'vscode';

suite('Extension Test Suite', () => {
    vscode.window.showInformationMessage('Start all tests.');

    let extension: vscode.Extension<any> | undefined;
    let context: vscode.ExtensionContext;

    setup(async () => {
        extension = vscode.extensions.getExtension('Fatemeh.smart-contract-vulnerability-detection');
        assert.ok(extension, 'Extension should be available.');

        // Mock the context with a globalState
        context = {
            globalState: {
                update: async (key: string, value: any) => Promise.resolve(),
                get: (key: string) => (key === 'openaiApiKey' ? 'test-api-key' : undefined),
            },
        } as unknown as vscode.ExtensionContext;

        // Activate the extension
        await extension?.activate();
    });

    test('API Key Storage Test', async () => {
        const testKey = 'test-api-key';

        // Store and retrieve the API key
        await context.globalState.update('openaiApiKey', testKey);
        const storedKey = context.globalState.get('openaiApiKey');
        assert.strictEqual(storedKey, testKey, 'The API key should be stored and retrieved correctly.');
    });

    test('Command Registration Test', async () => {
        const commands = await vscode.commands.getCommands();
        const isCommandRegistered = commands.includes('smart-contract-vulnerability-detection.detectVulnerabilities');
        assert.strictEqual(isCommandRegistered, true, 'Vulnerability detection command should be registered.');
    });

    test('Detect Vulnerabilities Command Test', async () => {
        const document = await vscode.workspace.openTextDocument({
            content: `function withdraw(uint amount) public {
                require(balances[msg.sender] >= amount);
                msg.sender.call{value: amount}("");
                balances[msg.sender] -= amount;
            }`,
            language: 'solidity',
        });
        await vscode.window.showTextDocument(document);

        // Mock the API key in globalState
        await context.globalState.update('openaiApiKey', 'test-api-key');

        try {
            const result = await vscode.commands.executeCommand('smart-contract-vulnerability-detection.detectVulnerabilities');
            assert.ok(result, 'The detect vulnerabilities command should execute without errors.');
        } catch (error) {
            assert.fail(`Detect vulnerabilities command failed: ${error}`);
        }
    });
});
